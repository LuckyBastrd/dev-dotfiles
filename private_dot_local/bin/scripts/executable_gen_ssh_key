#!/usr/bin/env bash

# gen_ssh_key: Generate a new SSH key and optionally add it to the agent.
# Usage:
#   gen_ssh_key <key_name> <comment/email> [--no-passphrase | --auto-passphrase]

set -euo pipefail

show_usage() {
  cat <<EOF

üîß Usage: $0 <key_name> <comment/email> [--no-passphrase | --auto-passphrase]

üìå Examples:
  $0 github github@github.com
  $0 server server@example.com --no-passphrase
  $0 work work@example.com --auto-passphrase  (Linux only)

This will create:
  ~/.ssh/id_ed25519_<key_name>       (private key)
  ~/.ssh/id_ed25519_<key_name>.pub   (public key)

Flags:
  --no-passphrase     Skip passphrase prompt (not recommended)
  --auto-passphrase   Linux only: generate random passphrase and save encrypted

EOF
}

auto_add_key_with_expect() {
  local key_path="$1"
  local passphrase="$2"

  expect <<EOF
    log_user 1
    spawn ssh-add "$key_path"
    expect {
      "Enter passphrase for*" {
        sleep 0.2
        send "$passphrase\r"
        exp_continue
      }
      "Bad passphrase*" {
        exit 1
      }
      eof
    }
EOF
}

# === Parse Arguments ===
if [[ "${1:-}" == "--help" || "${1:-}" == "-h" || $# -lt 2 ]]; then
  show_usage
  exit 1
fi

KEY_NAME="$1"
COMMENT="$2"
KEY_PATH="$HOME/.ssh/id_ed25519_${KEY_NAME}"
PASSFILE="$HOME/.ssh/ssh_passphrases.tmp.gpg"
NO_PASSPHRASE=false
AUTO_PASS=false
OS="$(uname)"

if [[ "${3:-}" == "--no-passphrase" ]]; then
  NO_PASSPHRASE=true
elif [[ "${3:-}" == "--auto-passphrase" ]]; then
  AUTO_PASS=true
fi

# === Block auto passphrase on macOS ===
if [[ "$AUTO_PASS" == true && "$OS" == "Darwin" ]]; then
  echo "‚ùå --auto-passphrase is not supported on macOS."
  echo "üëâ Use --no-passphrase or enter one manually instead."
  exit 1
fi

# === Pre-checks ===
if [[ -f "$KEY_PATH" ]]; then
  echo "‚úÖ SSH key already exists at $KEY_PATH"
  exit 0
fi

mkdir -p ~/.ssh
chmod 700 ~/.ssh

# === Handle passphrase ===
PASSPHRASE=""

if [[ "$AUTO_PASS" == true ]]; then
  PASSPHRASE=$(openssl rand -base64 24)

  # Linux only
  GPG_PASS=""
  EXISTING_CONTENT=""
  if [[ -f "$PASSFILE" ]]; then
    echo "üîê Encrypted passphrase file already exists at $PASSFILE."
    read -rsp "Enter passphrase to decrypt existing file (leave empty to overwrite): " GPG_PASS
    echo
    if [[ -n "$GPG_PASS" ]]; then
      EXISTING_CONTENT=$(echo "$GPG_PASS" | gpg -d --batch --passphrase-fd 0 "$PASSFILE" 2>/dev/null || true)
      if [[ -z "$EXISTING_CONTENT" ]]; then
        echo "‚ö†Ô∏è Could not decrypt existing file with given passphrase. Aborting."
        exit 1
      fi
    else
      echo "‚ö†Ô∏è Overwriting existing file."
      EXISTING_CONTENT=""
    fi
  fi

  # Append and encrypt
  UPDATED_CONTENT="${EXISTING_CONTENT}"$'\n'"${KEY_NAME}=${PASSPHRASE}"
  if [[ -n "$GPG_PASS" ]]; then
    echo "$UPDATED_CONTENT" | gpg -c --batch --passphrase "$GPG_PASS" --yes -o "$PASSFILE"
  else
    echo "$UPDATED_CONTENT" | gpg -c --batch --yes -o "$PASSFILE"
  fi
  chmod 600 "$PASSFILE"
fi

# === Key Generation ===
if [[ "$NO_PASSPHRASE" == true ]]; then
  ssh-keygen -t ed25519 -C "$COMMENT" -f "$KEY_PATH" -N ""
elif [[ "$AUTO_PASS" == true ]]; then
  ssh-keygen -t ed25519 -C "$COMMENT" -f "$KEY_PATH" -N "$PASSPHRASE"
else
  ssh-keygen -t ed25519 -C "$COMMENT" -f "$KEY_PATH"
fi

chmod 600 "$KEY_PATH"
chmod 644 "$KEY_PATH.pub"

echo "‚úÖ SSH key saved:"
echo "  - Private: $KEY_PATH"
echo "  - Public : $KEY_PATH.pub"

# === Add to SSH Agent if available ===
if [[ -S "${SSH_AUTH_SOCK:-}" ]]; then
  if $AUTO_PASS; then
    if auto_add_key_with_expect "$KEY_PATH" "$PASSPHRASE"; then
      echo "üß† Key added to ssh-agent (auto passphrase)."
    else
      echo "‚ö†Ô∏è Failed to add SSH key using expect."
    fi
  else
    ssh-add "$KEY_PATH"
    echo "üß† Key added to ssh-agent."
  fi
else
  echo "‚ö†Ô∏è ssh-agent not running or SSH_AUTH_SOCK not set. Skipping ssh-add."
fi

# === Update SSH Config ===
update_ssh_config "$KEY_NAME" "$COMMENT" "$KEY_PATH" "${SSH_USER:-git}"

# === Show Public Key and Copy ===
show_ssh_key "$KEY_PATH"
