#!/usr/bin/env bash

# load_ssh_keys.sh: Decrypt stored SSH key passphrases and load all matching keys into the ssh-agent.

PASSFILE="$HOME/.ssh/ssh_passphrases.tmp.gpg"

if [[ ! -f "$PASSFILE" ]]; then
  echo "‚ùå Passphrase file not found: $PASSFILE"
  exit 1
fi

if [[ -z "${SSH_AUTH_SOCK:-}" || ! -S "$SSH_AUTH_SOCK" ]]; then
  echo "‚ùå SSH agent not running. Start it first (e.g., eval \$(ssh-agent))"
  exit 1
fi

# Decrypt passphrase store
echo "üîê Decrypting stored SSH passphrases..."
DECRYPTED=$(gpg -dq "$PASSFILE" 2>/dev/null)
if [[ -z "$DECRYPTED" ]]; then
  echo "‚ùå Failed to decrypt or file is empty."
  exit 1
fi

LOADED_COUNT=0

# Loop over key_name=passphrase pairs
while IFS='=' read -r key_name passphrase; do
  [[ -z "$key_name" || -z "$passphrase" ]] && continue

  # Support both ed25519 and rsa keys
  for prefix in id_ed25519_ id_rsa_; do
    KEY_PATH="$HOME/.ssh/${prefix}${key_name}"
    if [[ -f "$KEY_PATH" ]]; then
      echo "üîë Adding ${prefix}${key_name}..."
      expect <<EOF
        log_user 0
        spawn ssh-add "$KEY_PATH"
        expect {
          "Enter passphrase for*" {
            sleep 0.2
            send "$passphrase\r"
            exp_continue
          }
          "Bad passphrase*" {
            exit 1
          }
          eof
        }
EOF
      ((LOADED_COUNT++))
      break  # once one format is found and added, skip to next entry
    fi
  done

done <<< "$DECRYPTED"

if [[ "$LOADED_COUNT" -gt 0 ]]; then
  echo "‚úÖ Loaded $LOADED_COUNT SSH key(s)."
else
  echo "‚ö†Ô∏è No matching SSH key files found."
fi
